import aiohttp
import asyncio
import os
import sys
import time
from pystyle import Colors, Colorate

async def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

async def animate_loading():
    animation = ["[■□□□□□□□□□]", "[■■□□□□□□□□]", "[■■■□□□□□□□]", "[■■■■□□□□□□]", "[■■■■■□□□□□]", "[■■■■■■□□□□]", "[■■■■■■■□□□]", "[■■■■■■■■□□]", "[■■■■■■■■■□]", "[■■■■■■■■■■]"]

    for i in range(len(animation)):
        await asyncio.sleep(0.3)
        sys.stdout.write("\r" + animation[i % len(animation)])
        sys.stdout.flush()

async def send_request(session, nglusername, message):
    url = 'https://ngl.link/api/submit'
    headers = {
        'Host': 'ngl.link',
        'sec-ch-ua': '"Google Chrome";v="113", "Chromium";v="113", "Not-A.Brand";v="24"',
        'accept': '*/*',
        'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
        'x-requested-with': 'XMLHttpRequest',
        'sec-ch-ua-mobile': '?0',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36',
        'sec-ch-ua-platform': '"Windows"',
        'origin': 'https://ngl.link',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-mode': 'cors',
        'sec-fetch-dest': 'empty',
        'referer': f'https://ngl.link/{nglusername}',
        'accept-language': 'tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7',
    }
    data = {
        'username': f'{nglusername}',
        'question': f'{message}',
        'deviceId': '0',
        'gameSlug': '',
        'referrer': '',
    }
    
    async with session.post(url, headers=headers, data=data) as response:
        if response.status == 200:
            await animate_loading()
            return True
        else:
            return False

async def ngl(nglusername, count, custom_message=False):
    await clear_screen()

    if custom_message:
        message = input("Message: ")
    else:
        message = "function(deleter):____reset(fuck_you_)"
    async with aiohttp.ClientSession() as session:
        tasks = []
        for _ in range(count):
            task = send_request(session, nglusername, message)
            tasks.append(task)
        await asyncio.gather(*tasks)

   


async def return_to_menu():
    os.system("cls")
    input("Press Enter to return to the menu...")
    os.system("cls")
    await main()

async def main():
    try:
        print(Colorate.Vertical(Colors.blue_to_purple,"""
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⢉⢉⠉⠉⠻⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⠟⠠⡰⣕⣗⣷⣧⣀⣅⠘⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⠃⣠⣳⣟⣿⣿⣷⣿⡿⣜⠄⣿⣿⣿⣿⣿
⣿⣿⣿⣿⡿⠁⠄⣳⢷⣿⣿⣿⣿⡿⣝⠖⠄⣿⣿⣿⣿⣿
⣿⣿⣿⣿⠃⠄⢢⡹⣿⢷⣯⢿⢷⡫⣗⠍⢰⣿⣿⣿⣿⣿
⣿⣿⣿⡏⢀⢄⠤⣁⠋⠿⣗⣟⡯⡏⢎⠁⢸⣿⣿⣿⣿⣿
⣿⣿⣿⠄⢔⢕⣯⣿⣿⡲⡤⡄⡤⠄⡀⢠⣿⣿⣿⣿⣿⣿
⣿⣿⠇⠠⡳⣯⣿⣿⣾⢵⣫⢎⢎⠆⢀⣿⣿⣿⣿⣿⣿⣿
⣿⣿⠄⢨⣫⣿⣿⡿⣿⣻⢎⡗⡕⡅⢸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⠄⢜⢾⣾⣿⣿⣟⣗⢯⡪⡳⡱⡁⢸⣿⣿⣿⣿⣿⣿
⣿⣿⠄⢸⢽⣿⣷⣿⣻⡮⡧⡳⡱⡁⢸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⡄⢨⣻⣽⣿⣟⣿⣞⣗⡽⡸⡐⢸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⡇⢀⢗⣿⣿⣿⣿⡿⣞⡵⡣⣊⢸⣿⣿⣿⣿⣿⣿⣿
⣿⣿⠁⠄⢕⡳⣽⡾⣿⢽⣯⡿⣮⢚⣅⠹⣿⣿⣿⣿⣿⣿
⡿⠋⠄⠄⠄⠄⢀⠒⠝⣞⢿⡿⣿⣽⢿⣧⣳⡅⠻⣿⣿⣿
⠁⠄⠄⠄⠄⠄⠐⡐⠱⡱⣻⡻⣝⣮⣟⣻⣟⣻⡺⣊⣿⣿
Code by: Kotaro1337"""))
        nglusername = input("Username: ")
        option = input("Choose an option (1 - Spammer / 2 - Deleter): ")
      
        if option == "1":
            custom_message = True
        elif option == "2":
            custom_message = False
        else:
            print("Invalid option")
            return

        count = int(input("Count: "))

        await ngl(nglusername, count, custom_message)
    finally:
        await asyncio.sleep(1)  # Give time for tasks to complete
        await asyncio.get_running_loop().shutdown_asyncgens()




asyncio.run(main())
